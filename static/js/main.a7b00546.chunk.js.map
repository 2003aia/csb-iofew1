{"version":3,"sources":["Login.tsx","Contacts.tsx","App.tsx","redux.ts","index.tsx"],"names":["Login","useState","email","setEmail","password","setPassword","className","value","onChange","v","target","placeholder","onClick","console","log","Contacts","App","path","element","counterSlice","createSlice","name","initialState","reducers","incremented","state","decremented","actions","store","configureStore","reducer","rootElement","document","getElementById","render"],"mappings":"sLAGaA,EAAQ,WACnB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEA,OACE,sBAAKC,UAAU,QAAf,UACE,sCACA,uBACEC,MAAOL,EACPM,SAAU,SAACC,GAAD,OAAON,EAASM,EAAEC,OAAOH,QACnCI,YAAY,UAEd,uBACA,uBACEJ,MAAOH,EACPI,SAAU,SAACC,GAAD,OAAOJ,EAAYI,EAAEC,OAAOH,QACtCI,YAAY,aAEd,uBACA,wBACEC,QAAS,WACPC,QAAQC,IAAIZ,EAAOE,GACnBD,EAAS,IACTE,EAAY,KAJhB,wECpBOU,EAAW,WACtB,OACE,8BACE,2CCAS,SAASC,IACtB,OACE,qBAAKV,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOW,KAAK,IAAIC,QAAS,cAAC,EAAD,MAEzB,cAAC,IAAD,CAAOD,KAAK,YAAYC,QAAS,cAAC,EAAD,W,2BCTnCC,EAAeC,YAAY,CAC/BC,KAAM,UACNC,aAAc,CACZf,MAAO,GAETgB,SAAU,CACRC,YAAa,SAACC,GAKZA,EAAMlB,OAAS,GAEjBmB,YAAa,SAACD,GACZA,EAAMlB,OAAS,MAKd,EAAqCY,EAAaQ,QAE5CC,GAFN,EAAQJ,YAAR,EAAqBE,YAEPG,YAAe,CAClCC,QAASX,EAAaW,WClBlBC,EAAcC,SAASC,eAAe,QAC5CC,iBACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAACZ,EAAD,QAIJe,K","file":"static/js/main.a7b00546.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport const Login = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <p>Login</p>\r\n      <input\r\n        value={email}\r\n        onChange={(v) => setEmail(v.target.value)}\r\n        placeholder=\"email\"\r\n      />\r\n      <br />\r\n      <input\r\n        value={password}\r\n        onChange={(v) => setPassword(v.target.value)}\r\n        placeholder=\"password\"\r\n      />\r\n      <br />\r\n      <button\r\n        onClick={() => {\r\n          console.log(email, password);\r\n          setEmail(\"\");\r\n          setPassword(\"\");\r\n        }}\r\n      >\r\n        Отправить\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Contacts = () => {\r\n  return (\r\n    <div>\r\n      <p>example</p>\r\n    </div>\r\n  );\r\n};\r\n","import \"./styles.css\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\nimport { Login } from \"./Login\";\nimport { Contacts } from \"./Contacts\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\" element={<Login />} />\n\n        <Route path=\"/contacts\" element={<Contacts />} />\n      </Routes>\n    </div>\n  );\n}\n","import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: {\r\n    value: 0\r\n  },\r\n  reducers: {\r\n    incremented: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decremented: (state) => {\r\n      state.value -= 1;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { incremented, decremented } = counterSlice.actions;\r\n\r\nexport const store = configureStore({\r\n  reducer: counterSlice.reducer\r\n});\r\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux\";\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n\n  rootElement\n);\n"],"sourceRoot":""}